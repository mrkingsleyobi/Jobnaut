name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install backend dependencies
      run: npm ci

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Run backend tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

    - name: Run frontend tests
      run: cd frontend && npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: jobnaut/backend,jobnaut/frontend

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }},jobnaut/backend:latest
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: jobnaut/frontend:latest
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to production
      run: |
        echo "Deployment completed successfully!"
        echo "Backend image: jobnaut/backend:latest"
        echo "Frontend image: jobnaut/frontend:latest"
      env:
        NODE_ENV: production